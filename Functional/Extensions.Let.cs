// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TResult>(
        this T self, Func<T, TResult> fn
    ) where T : notnull
    {
        return fn(self);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TResult>(
        this T self, TArg1 arg1, Func<T, TArg1, TResult> fn

    ) where T : notnull
    {
        return fn(self, arg1);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TResult>(
        this T self, TArg1 arg1, TArg2 arg2, Func<T, TArg1, TArg2, TResult> fn

    ) where T : notnull
    {
        return fn(self, arg1, arg2);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TResult>(
        this T self, TArg1 arg1, TArg2 arg2, TArg3 arg3, Func<T, TArg1, TArg2, TArg3, TResult> fn

    ) where T : notnull
    {
        return fn(self, arg1, arg2, arg3);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TArg4, TResult>(
        this T self, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, Func<T, TArg1, TArg2, TArg3, TArg4, TResult> fn

    ) where T : notnull
    {
        return fn(self, arg1, arg2, arg3, arg4);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(
        this T self, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, Func<T, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> fn

    ) where T : notnull
    {
        return fn(self, arg1, arg2, arg3, arg4, arg5);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(
        this T self, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, Func<T, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> fn

    ) where T : notnull
    {
        return fn(self, arg1, arg2, arg3, arg4, arg5, arg6);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(
        this T self, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, Func<T, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> fn

    ) where T : notnull
    {
        return fn(self, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TResult>(
        this T self, Func<TArg1, T, TResult> fn, TArg1 arg1
    ) where T : notnull
    {
        return fn(arg1, self);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TResult>(
        this T self, Func<TArg1, TArg2, T, TResult> fn, TArg1 arg1, TArg2 arg2
    ) where T : notnull
    {
        return fn(arg1, arg2, self);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TResult>(
        this T self, Func<TArg1, TArg2, TArg3, T, TResult> fn, TArg1 arg1, TArg2 arg2, TArg3 arg3
    ) where T : notnull
    {
        return fn(arg1, arg2, arg3, self);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TArg4, TResult>(
        this T self, Func<TArg1, TArg2, TArg3, TArg4, T, TResult> fn, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4
    ) where T : notnull
    {
        return fn(arg1, arg2, arg3, arg4, self);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(
        this T self, Func<TArg1, TArg2, TArg3, TArg4, TArg5, T, TResult> fn, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5
    ) where T : notnull
    {
        return fn(arg1, arg2, arg3, arg4, arg5, self);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(
        this T self, Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, T, TResult> fn, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6
    ) where T : notnull
    {
        return fn(arg1, arg2, arg3, arg4, arg5, arg6, self);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(
        this T self, Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, T, TResult> fn, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7
    ) where T : notnull
    {
        return fn(arg1, arg2, arg3, arg4, arg5, arg6, arg7, self);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T1, T2, TResult>(
        this (T1, T2) self, Func<T1, T2, TResult> fn
    )
    {
        return fn(self.Item1, self.Item2);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T1, T2, T3, TResult>(
        this (T1, T2, T3) self, Func<T1, T2, T3, TResult> fn
    )
    {
        return fn(self.Item1, self.Item2, self.Item3);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T1, T2, T3, T4, TResult>(
        this (T1, T2, T3, T4) self, Func<T1, T2, T3, T4, TResult> fn
    )
    {
        return fn(self.Item1, self.Item2, self.Item3, self.Item4);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T1, T2, T3, T4, T5, TResult>(
        this (T1, T2, T3, T4, T5) self, Func<T1, T2, T3, T4, T5, TResult> fn
    )
    {
        return fn(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T1, T2, T3, T4, T5, T6, TResult>(
        this (T1, T2, T3, T4, T5, T6) self, Func<T1, T2, T3, T4, T5, T6, TResult> fn
    )
    {
        return fn(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T1, T2, T3, T4, T5, T6, T7, TResult>(
        this (T1, T2, T3, T4, T5, T6, T7) self, Func<T1, T2, T3, T4, T5, T6, T7, TResult> fn
    )
    {
        return fn(self.Item1, self.Item2, self.Item3, self.Item4, self.Item5, self.Item6, self.Item7);
    }

}
