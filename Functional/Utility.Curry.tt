<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Utility
{
<#
for (var i = 2; i <= MaxCount; i++)
{
    var actionTypeParams = string.Join(", ", Enumerable.Range(1, i).Select(n => $"T{n}"));
    var funcTypeParams = actionTypeParams + ", TResult";
    var args = $"arg1{string.Join("", Enumerable.Range(2, i - 1).Select(j => $", arg{j}"))}";

    for (var j = 1; j <= i; j++)
    {
#>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= GetFuncReturnTypeString(j, i) #> Curry<<#= funcTypeParams #>>(
        Func<<#= funcTypeParams #>> fn<#= string.Join("", Enumerable.Range(1, j - 1).Select(n => $", T{n} arg{n}")) #>
    )
    {
        return <#= string.Join("", Enumerable.Range(j, i - j + 1).Select(j => $"arg{j} => ")) #>fn(<#= args #>);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= GetActionReturnTypeString(j, i) #> Curry<<#= actionTypeParams #>>(
        Action<<#= actionTypeParams #>> action<#= string.Join("", Enumerable.Range(1, j - 1).Select(n => $", T{n} arg{n}")) #>
    )
    {
        return <#= string.Join("", Enumerable.Range(j, i - j + 1).Select(j => $"arg{j} => ")) #>action(<#= args #>);
    }

<#
    }
}
#>
}
<#+
static string GetFuncReturnTypeString(int start, int end)
{
    var result = "";

    for (var i = start; i < end; i++)
    {
        result += $"Func<T{i}, ";
    }

    result += $"Func<T{end}, TResult>";

    for (var i = start; i < end; i++)
    {
        result += ">";
    }

    return result;
}

static string GetActionReturnTypeString(int start, int end)
{
    var result = "";

    for (var i = start; i < end; i++)
    {
        result += $"Func<T{i}, ";
    }

    result += $"Action<T{end}>";

    for (var i = start; i < end; i++)
    {
        result += ">";
    }

    return result;
}
#>