<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Functional;

partial class Utility
{
<# for (int i = 2; i <= MaxCount; i++) { #>
    public static (<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>) Tuple<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>>(
<# for (int j = 1; j < i; j++) { #>
        T<#= j #> value<#= j #>,
<# } #>
        T<#= i #> value<#= i #>
    )
    {
        return (
<# for (int j = 1; j < i; j++) { #>
            value<#= j #>,
<# } #>
            value<#= i #>
        );
    }

    public static Action<(<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>)> ToTupled<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>>(
        Action<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>> action
    )
    {
        return tuple => action(
<# for (int j = 1; j < i; j++) { #>
            tuple.Item<#= j #>,
<# } #>
            tuple.Item<#= i #>
        );
    }

    public static Func<(<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>), TResult> ToTupled<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>, TResult>(
        Func<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>, TResult> fn
    )
    {
        return tuple => fn(
<# for (int j = 1; j < i; j++) { #>
            tuple.Item<#= j #>,
<# } #>
            tuple.Item<#= i #>
        );
    }

    public static Action<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>> FromTupled<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>>(
        Action<(<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>)> action
    )
    {
        return (<# for (int j = 1; j < i; j++) { #>p<#= j #>, <# } #>p<#= i #>) => action((
<# for (int j = 1; j < i; j++) { #>
            p<#= j #>,
<# } #>
            p<#= i #>
        ));
    }

    public static Func<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>, TResult> FromTupled<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>, TResult>(
        Func<(<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>), TResult> fn
    )
    {
        return (<# for (int j = 1; j < i; j++) { #>p<#= j #>, <# } #>p<#= i #>) => fn((
<# for (int j = 1; j < i; j++) { #>
            p<#= j #>,
<# } #>
            p<#= i #>
        ));
    }

<# } #>
}