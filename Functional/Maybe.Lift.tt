<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Functional;

partial class Maybe
{
    public static Func<Maybe<T>,  Maybe<TResult>> Lift<T, TResult>(
        Func<T, TResult> fn
    )
    {
        return maybe => Maybe.Just(fn).Apply(maybe);
    }

<# for (var i = 2; i <= MaxCount; i++) { #>
    public static Func<<# for (var j = 1; j <= i; j++) { #>Maybe<T<#= j #>>, <# } #> Maybe<TResult>> Lift<#= i #><<# for (var j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(
        Func<<# for (var j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> fn
    )
    {
        return (<# for (var j = 1; j <= i; j++) { #>maybe<#= j #><# if (j < i) { #>, <# } #><# } #>) => Maybe.Just(fn).Apply(<# for (var j = 1; j <= i; j++) { #>maybe<#= j #><# if (j < i) { #>, <# } #><# } #>);
    }

<# } #>
}