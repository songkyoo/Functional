<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Functional;

partial class Extensions
{
<# for (int i = 0; i <= MaxCount; i++) { #>
    public static T Also<T<# for (int j = 1; j <= i; j++) { #>, TArg<#= j #><# } #>>(
        this T self, Action<T<# for (int j = 1; j <= i; j++) { #>, TArg<#= j #><# } #>> action<# for (int j = 1; j <= i; j++) { #>, TArg<#= j #> arg<#= j #><# } #>

    ) where T : notnull
    {
        action(self<# for (int j = 1; j <= i; j++) { #>, arg<#= j #><# } #>);
        return self;
    }

<# } #>
<# for (int i = 2; i <= MaxCount; i++) { #>
    public static (<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>) Also<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>>(
        this (<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>) self, Action<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>> action<# for (int j = 1; j <= i; j++) { #>, T<#= j #> arg<#= j #><# } #>

    )
    {
        action(<# for (int j = 1; j < i; j++) { #>self.Item<#= j #>, <# } #>self.Item<#= i #>);
        return self;
    }

<# } #>
}
