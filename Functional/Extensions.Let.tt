<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Extensions
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, TResult>(
        this T self, Func<T, TResult> fn
    ) where T : notnull
    {
        return fn(self);
    }

<# for (var i = 1; i <= MaxCount; i++) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, <# for (var j = 1; j <= i; j++) { #>TArg<#= j #>, <# } #>TResult>(
        this T self<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #> arg<#= j #><# } #>, Func<T, <# for (var j = 1; j <= i; j++) { #>TArg<#= j #>, <# } #>TResult> fn

    ) where T : notnull
    {
        return fn(self<# for (var j = 1; j <= i; j++) { #>, arg<#= j #><# } #>);
    }

<# } #>
<# for (var i = 1; i <= MaxCount; i++) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<T, <# for (var j = 1; j <= i; j++) { #>TArg<#= j #>, <# } #>TResult>(
        this T self, Func<<# for (var j = 1; j <= i; j++) { #>TArg<#= j #>, <# } #>T, TResult> fn<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #> arg<#= j #><# } #>

    ) where T : notnull
    {
        return fn(<# for (var j = 1; j <= i; j++) { #>arg<#= j #>, <# } #>self);
    }

<# } #>
<# for (var i = 2; i <= MaxCount; i++) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Let<<# for (var j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(
        this (<# for (var j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>) self, Func<<# for (var j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> fn
    )
    {
        return fn(<# for (var j = 1; j < i; j++) { #>self.Item<#= j #>, <# } #>self.Item<#= i #>);
    }

<# } #>
}
