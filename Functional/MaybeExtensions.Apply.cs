// <auto-generated />
namespace Macaron.Functional;

partial class MaybeExtensions
{
    public static Maybe<TResult> Apply<T, TResult>(
        this Maybe<Func<T, TResult>> fn,
        Maybe<T> maybe
    )
    {
        if (fn.IsNothing || maybe.IsNothing)
        {
            return Maybe.Nothing();
        }

        var f = fn.Value;
        var value = maybe.Value;
        var result = f(value);

        return Maybe.Just(result);
    }

    public static Maybe<TResult> Apply<T1, T2, TResult>(
        this Maybe<Func<T1, T2, TResult>> fn,
        Maybe<T1> maybe1,
        Maybe<T2> maybe2
    )
    {
        if (fn.IsNothing || maybe1.IsNothing || maybe2.IsNothing)
        {
            return Maybe.Nothing();
        }

        var f = fn.Value;
        var value1 = maybe1.Value;
        var value2 = maybe2.Value;
        var result = f(value1, value2);

        return Maybe.Just(result);
    }

    public static Maybe<TResult> Apply<T1, T2, T3, TResult>(
        this Maybe<Func<T1, T2, T3, TResult>> fn,
        Maybe<T1> maybe1,
        Maybe<T2> maybe2,
        Maybe<T3> maybe3
    )
    {
        if (fn.IsNothing || maybe1.IsNothing || maybe2.IsNothing || maybe3.IsNothing)
        {
            return Maybe.Nothing();
        }

        var f = fn.Value;
        var value1 = maybe1.Value;
        var value2 = maybe2.Value;
        var value3 = maybe3.Value;
        var result = f(value1, value2, value3);

        return Maybe.Just(result);
    }

    public static Maybe<TResult> Apply<T1, T2, T3, T4, TResult>(
        this Maybe<Func<T1, T2, T3, T4, TResult>> fn,
        Maybe<T1> maybe1,
        Maybe<T2> maybe2,
        Maybe<T3> maybe3,
        Maybe<T4> maybe4
    )
    {
        if (fn.IsNothing || maybe1.IsNothing || maybe2.IsNothing || maybe3.IsNothing || maybe4.IsNothing)
        {
            return Maybe.Nothing();
        }

        var f = fn.Value;
        var value1 = maybe1.Value;
        var value2 = maybe2.Value;
        var value3 = maybe3.Value;
        var value4 = maybe4.Value;
        var result = f(value1, value2, value3, value4);

        return Maybe.Just(result);
    }

    public static Maybe<TResult> Apply<T1, T2, T3, T4, T5, TResult>(
        this Maybe<Func<T1, T2, T3, T4, T5, TResult>> fn,
        Maybe<T1> maybe1,
        Maybe<T2> maybe2,
        Maybe<T3> maybe3,
        Maybe<T4> maybe4,
        Maybe<T5> maybe5
    )
    {
        if (fn.IsNothing || maybe1.IsNothing || maybe2.IsNothing || maybe3.IsNothing || maybe4.IsNothing || maybe5.IsNothing)
        {
            return Maybe.Nothing();
        }

        var f = fn.Value;
        var value1 = maybe1.Value;
        var value2 = maybe2.Value;
        var value3 = maybe3.Value;
        var value4 = maybe4.Value;
        var value5 = maybe5.Value;
        var result = f(value1, value2, value3, value4, value5);

        return Maybe.Just(result);
    }

    public static Maybe<TResult> Apply<T1, T2, T3, T4, T5, T6, TResult>(
        this Maybe<Func<T1, T2, T3, T4, T5, T6, TResult>> fn,
        Maybe<T1> maybe1,
        Maybe<T2> maybe2,
        Maybe<T3> maybe3,
        Maybe<T4> maybe4,
        Maybe<T5> maybe5,
        Maybe<T6> maybe6
    )
    {
        if (fn.IsNothing || maybe1.IsNothing || maybe2.IsNothing || maybe3.IsNothing || maybe4.IsNothing || maybe5.IsNothing || maybe6.IsNothing)
        {
            return Maybe.Nothing();
        }

        var f = fn.Value;
        var value1 = maybe1.Value;
        var value2 = maybe2.Value;
        var value3 = maybe3.Value;
        var value4 = maybe4.Value;
        var value5 = maybe5.Value;
        var value6 = maybe6.Value;
        var result = f(value1, value2, value3, value4, value5, value6);

        return Maybe.Just(result);
    }

    public static Maybe<TResult> Apply<T1, T2, T3, T4, T5, T6, T7, TResult>(
        this Maybe<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> fn,
        Maybe<T1> maybe1,
        Maybe<T2> maybe2,
        Maybe<T3> maybe3,
        Maybe<T4> maybe4,
        Maybe<T5> maybe5,
        Maybe<T6> maybe6,
        Maybe<T7> maybe7
    )
    {
        if (fn.IsNothing || maybe1.IsNothing || maybe2.IsNothing || maybe3.IsNothing || maybe4.IsNothing || maybe5.IsNothing || maybe6.IsNothing || maybe7.IsNothing)
        {
            return Maybe.Nothing();
        }

        var f = fn.Value;
        var value1 = maybe1.Value;
        var value2 = maybe2.Value;
        var value3 = maybe3.Value;
        var value4 = maybe4.Value;
        var value5 = maybe5.Value;
        var value6 = maybe6.Value;
        var value7 = maybe7.Value;
        var result = f(value1, value2, value3, value4, value5, value6, value7);

        return Maybe.Just(result);
    }

    public static Maybe<TResult> Apply<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(
        this Maybe<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> fn,
        Maybe<T1> maybe1,
        Maybe<T2> maybe2,
        Maybe<T3> maybe3,
        Maybe<T4> maybe4,
        Maybe<T5> maybe5,
        Maybe<T6> maybe6,
        Maybe<T7> maybe7,
        Maybe<T8> maybe8
    )
    {
        if (fn.IsNothing || maybe1.IsNothing || maybe2.IsNothing || maybe3.IsNothing || maybe4.IsNothing || maybe5.IsNothing || maybe6.IsNothing || maybe7.IsNothing || maybe8.IsNothing)
        {
            return Maybe.Nothing();
        }

        var f = fn.Value;
        var value1 = maybe1.Value;
        var value2 = maybe2.Value;
        var value3 = maybe3.Value;
        var value4 = maybe4.Value;
        var value5 = maybe5.Value;
        var value6 = maybe6.Value;
        var value7 = maybe7.Value;
        var value8 = maybe8.Value;
        var result = f(value1, value2, value3, value4, value5, value6, value7, value8);

        return Maybe.Just(result);
    }

}