<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Maybe
{
<# for (var i = 2; i <= MaxCount; i++) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Maybe<TResult> Map<#= i #><<# for (var j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(
        Func<<# for (var j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> fn,
<# for (var j = 1; j < i; j++) { #>
        Maybe<T<#= j #>> maybe<#= j #>,
<# } #>
        Maybe<T<#= i #>> maybe<#= i #>
    )
    {
        return Maybe.Just(fn).Apply(<# for (var j = 1; j <= i; j++) { #>maybe<#= j #><# if (j < i) { #>, <# } #><# } #>);
    }

<# } #>
}
