<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Functional;

partial class MaybeExtensions
{
<# for (int i = 2; i <= MaxCount; i++) { #>
    public static Maybe<TResult> Apply<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(
        this Maybe<Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>> fn,
<# for (int j = 1; j < i; j++) { #>
        Maybe<T<#= j #>> maybe<#= j #>,
<# } #>
        Maybe<T<#= i #>> maybe<#= i #>
    )
    {
        if (fn.IsNothing<# for (int j = 1; j <= i; j++) { #> || maybe<#= j #>.IsNothing<# } #>)
        {
            return Maybe.Nothing();
        }

        var f = fn.Value;
<# for (int j = 1; j <= i; j++) { #>
        var value<#= j #> = maybe<#= j #>.Value;
<# } #>
        var result = f(<# for (int j = 1; j <= i; j++) { #>value<#= j #><# if (j < i) { #>, <# } #><# } #>);

        return Maybe.Just(result);
    }

<# } #>
}