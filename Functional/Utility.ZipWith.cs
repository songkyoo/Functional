// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Utility
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (TResult1, TResult2) ZipWith<T1, T2, TResult1, TResult2>(
        (T1, T2) left,
        (T1, T2) right,
        Func<T1, T1, TResult1> f1,
        Func<T2, T2, TResult2> f2
    )
    {
        return (f1(left.Item1, right.Item1), f2(left.Item2, right.Item2));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (TResult1, TResult2, TResult3) ZipWith<T1, T2, T3, TResult1, TResult2, TResult3>(
        (T1, T2, T3) left,
        (T1, T2, T3) right,
        Func<T1, T1, TResult1> f1,
        Func<T2, T2, TResult2> f2,
        Func<T3, T3, TResult3> f3
    )
    {
        return (f1(left.Item1, right.Item1), f2(left.Item2, right.Item2), f3(left.Item3, right.Item3));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (TResult1, TResult2, TResult3, TResult4) ZipWith<T1, T2, T3, T4, TResult1, TResult2, TResult3, TResult4>(
        (T1, T2, T3, T4) left,
        (T1, T2, T3, T4) right,
        Func<T1, T1, TResult1> f1,
        Func<T2, T2, TResult2> f2,
        Func<T3, T3, TResult3> f3,
        Func<T4, T4, TResult4> f4
    )
    {
        return (f1(left.Item1, right.Item1), f2(left.Item2, right.Item2), f3(left.Item3, right.Item3), f4(left.Item4, right.Item4));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (TResult1, TResult2, TResult3, TResult4, TResult5) ZipWith<T1, T2, T3, T4, T5, TResult1, TResult2, TResult3, TResult4, TResult5>(
        (T1, T2, T3, T4, T5) left,
        (T1, T2, T3, T4, T5) right,
        Func<T1, T1, TResult1> f1,
        Func<T2, T2, TResult2> f2,
        Func<T3, T3, TResult3> f3,
        Func<T4, T4, TResult4> f4,
        Func<T5, T5, TResult5> f5
    )
    {
        return (f1(left.Item1, right.Item1), f2(left.Item2, right.Item2), f3(left.Item3, right.Item3), f4(left.Item4, right.Item4), f5(left.Item5, right.Item5));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (TResult1, TResult2, TResult3, TResult4, TResult5, TResult6) ZipWith<T1, T2, T3, T4, T5, T6, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6>(
        (T1, T2, T3, T4, T5, T6) left,
        (T1, T2, T3, T4, T5, T6) right,
        Func<T1, T1, TResult1> f1,
        Func<T2, T2, TResult2> f2,
        Func<T3, T3, TResult3> f3,
        Func<T4, T4, TResult4> f4,
        Func<T5, T5, TResult5> f5,
        Func<T6, T6, TResult6> f6
    )
    {
        return (f1(left.Item1, right.Item1), f2(left.Item2, right.Item2), f3(left.Item3, right.Item3), f4(left.Item4, right.Item4), f5(left.Item5, right.Item5), f6(left.Item6, right.Item6));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7) ZipWith<T1, T2, T3, T4, T5, T6, T7, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7>(
        (T1, T2, T3, T4, T5, T6, T7) left,
        (T1, T2, T3, T4, T5, T6, T7) right,
        Func<T1, T1, TResult1> f1,
        Func<T2, T2, TResult2> f2,
        Func<T3, T3, TResult3> f3,
        Func<T4, T4, TResult4> f4,
        Func<T5, T5, TResult5> f5,
        Func<T6, T6, TResult6> f6,
        Func<T7, T7, TResult7> f7
    )
    {
        return (f1(left.Item1, right.Item1), f2(left.Item2, right.Item2), f3(left.Item3, right.Item3), f4(left.Item4, right.Item4), f5(left.Item5, right.Item5), f6(left.Item6, right.Item6), f7(left.Item7, right.Item7));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7, TResult8) ZipWith<T1, T2, T3, T4, T5, T6, T7, T8, TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7, TResult8>(
        (T1, T2, T3, T4, T5, T6, T7, T8) left,
        (T1, T2, T3, T4, T5, T6, T7, T8) right,
        Func<T1, T1, TResult1> f1,
        Func<T2, T2, TResult2> f2,
        Func<T3, T3, TResult3> f3,
        Func<T4, T4, TResult4> f4,
        Func<T5, T5, TResult5> f5,
        Func<T6, T6, TResult6> f6,
        Func<T7, T7, TResult7> f7,
        Func<T8, T8, TResult8> f8
    )
    {
        return (f1(left.Item1, right.Item1), f2(left.Item2, right.Item2), f3(left.Item3, right.Item3), f4(left.Item4, right.Item4), f5(left.Item5, right.Item5), f6(left.Item6, right.Item6), f7(left.Item7, right.Item7), f8(left.Item8, right.Item8));
    }

}

