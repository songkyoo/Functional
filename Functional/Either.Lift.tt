<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Functional;

partial class Either
{
    public static Func<Either<TLeft, TRight>, Either<TLeft, TResult>> Lift2<TLeft, TRight, TResult>(
        Func<TRight, TResult> fn
    )
    {
        return either => Either.Right<TLeft, Func<TRight, TResult>>(fn).Apply(either);
    }

<# for (var i = 2; i <= MaxCount; i++) { #>
    public static Func<<# for (var j = 1; j <= i; j++) { #>Either<TLeft, TRight<#= j #>>, <# } #>Either<TLeft, TResult>> Lift<#= i #><TLeft, <# for (var j = 1; j <= i; j++) { #>TRight<#= j #>, <# } #>TResult>(
        Func<<# for (var j = 1; j <= i; j++) { #>TRight<#= j #>, <# } #>TResult> fn
    )
    {
        return (<# for (var j = 1; j <= i; j++) { #>either<#= j #><# if (j < i) { #>, <# } #><# } #>) => Either.Right<TLeft, Func<<# for (var j = 1; j <= i; j++) { #>TRight<#= j #>, <# } #>TResult>>(fn).Apply(<# for (var j = 1; j <= i; j++) { #>either<#= j #><# if (j < i) { #>, <# } #><# } #>);
    }

<# } #>
}