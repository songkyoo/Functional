<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Functional;

partial class Extensions
{
<# for (int i = 0; i <= MaxCount; i++) { #>
    public static TResult Let<T, <# for (int j = 1; j <= i; j++) { #>TArg<#= j #>, <# } #>TResult>(
        this T self, Func<T, <# for (int j = 1; j <= i; j++) { #>TArg<#= j #>, <# } #>TResult> fn<# for (int j = 1; j <= i; j++) { #>, TArg<#= j #> arg<#= j #><# } #>

    ) where T : notnull
    {
        return fn(self<# for (int j = 1; j <= i; j++) { #>, arg<#= j #><# } #>);
    }

<# } #>
}
