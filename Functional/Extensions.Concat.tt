<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
<#@ import namespace="System.Linq" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Extensions
{
<#
for (var i = 2; i <= MaxCount - 2; i++)
{
    for (var j = 2; j <= MaxCount - i; j++)
    {
        var totalCount = i + j;
#>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (<#= Generate(totalCount) #>) Concat<<#= Generate(totalCount) #>>(this (<#= Generate(i) #>) first, (<#= Generate(totalCount, skipCount: i) #>) second)
    {
        return (<#= Generate(i, prefix: "first.Item") #>, <#= Generate(j, prefix: "second.Item") #>);
    }

<#
    }
}
#>
}

<#+
    string Generate(int n, int skipCount = 0, string prefix = null) => string.Join(", ", Enumerable.Range(1, n).Skip(skipCount).Select(i => $"{prefix ?? "T"}{i}"));
#>
