<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
<#@ import namespace="System.Linq" #>
// <auto-generated />
namespace Macaron.Functional;

partial class Utility
{
    public static T1 Item1<T1, T2>(KeyValuePair<T1, T2> pair) => pair.Key;

    public static T2 Item2<T1, T2>(KeyValuePair<T1, T2> pair) => pair.Value;

<#
for (int i = 2; i <= MaxCount; i++)
{
    for (int j = 1; j <= i; j++)
    {
        var genericTypeParameters = string.Join(", ", Enumerable.Range(1, i).Select(static i => $"T{i}"));
#>
    public static T<#= j #> Item<#= j #><<#= genericTypeParameters #>>((<#= genericTypeParameters #>) tuple)
    {
        return tuple.Item<#= j #>;
    }

<#
    } // end for j
} // end for i
#>
}
