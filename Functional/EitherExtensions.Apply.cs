// <auto-generated />
namespace Macaron.Functional;

partial class EitherExtensions
{
    public static Either<TLeft, TResult> Apply<TLeft, TRight1, TRight2, TResult>(
        this Either<TLeft, Func<TRight1, TRight2, TResult>> fn,
        Either<TLeft, TRight1> either1,
        Either<TLeft, TRight2> either2
    )
    {
        if (fn.IsLeft)
        {
            return Either.Left<TLeft, TResult>(fn.Left);
        }

        if (either1.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either1.Left);
        }

        if (either2.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either2.Left);
        }

        var f = fn.Right;
        var value1 = either1.Right;
        var value2 = either2.Right;
        var result = f(value1, value2);

        return Either.Right<TLeft, TResult>(result);
    }

    public static Either<TLeft, TResult> Apply<TLeft, TRight1, TRight2, TRight3, TResult>(
        this Either<TLeft, Func<TRight1, TRight2, TRight3, TResult>> fn,
        Either<TLeft, TRight1> either1,
        Either<TLeft, TRight2> either2,
        Either<TLeft, TRight3> either3
    )
    {
        if (fn.IsLeft)
        {
            return Either.Left<TLeft, TResult>(fn.Left);
        }

        if (either1.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either1.Left);
        }

        if (either2.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either2.Left);
        }

        if (either3.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either3.Left);
        }

        var f = fn.Right;
        var value1 = either1.Right;
        var value2 = either2.Right;
        var value3 = either3.Right;
        var result = f(value1, value2, value3);

        return Either.Right<TLeft, TResult>(result);
    }

    public static Either<TLeft, TResult> Apply<TLeft, TRight1, TRight2, TRight3, TRight4, TResult>(
        this Either<TLeft, Func<TRight1, TRight2, TRight3, TRight4, TResult>> fn,
        Either<TLeft, TRight1> either1,
        Either<TLeft, TRight2> either2,
        Either<TLeft, TRight3> either3,
        Either<TLeft, TRight4> either4
    )
    {
        if (fn.IsLeft)
        {
            return Either.Left<TLeft, TResult>(fn.Left);
        }

        if (either1.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either1.Left);
        }

        if (either2.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either2.Left);
        }

        if (either3.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either3.Left);
        }

        if (either4.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either4.Left);
        }

        var f = fn.Right;
        var value1 = either1.Right;
        var value2 = either2.Right;
        var value3 = either3.Right;
        var value4 = either4.Right;
        var result = f(value1, value2, value3, value4);

        return Either.Right<TLeft, TResult>(result);
    }

    public static Either<TLeft, TResult> Apply<TLeft, TRight1, TRight2, TRight3, TRight4, TRight5, TResult>(
        this Either<TLeft, Func<TRight1, TRight2, TRight3, TRight4, TRight5, TResult>> fn,
        Either<TLeft, TRight1> either1,
        Either<TLeft, TRight2> either2,
        Either<TLeft, TRight3> either3,
        Either<TLeft, TRight4> either4,
        Either<TLeft, TRight5> either5
    )
    {
        if (fn.IsLeft)
        {
            return Either.Left<TLeft, TResult>(fn.Left);
        }

        if (either1.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either1.Left);
        }

        if (either2.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either2.Left);
        }

        if (either3.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either3.Left);
        }

        if (either4.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either4.Left);
        }

        if (either5.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either5.Left);
        }

        var f = fn.Right;
        var value1 = either1.Right;
        var value2 = either2.Right;
        var value3 = either3.Right;
        var value4 = either4.Right;
        var value5 = either5.Right;
        var result = f(value1, value2, value3, value4, value5);

        return Either.Right<TLeft, TResult>(result);
    }

    public static Either<TLeft, TResult> Apply<TLeft, TRight1, TRight2, TRight3, TRight4, TRight5, TRight6, TResult>(
        this Either<TLeft, Func<TRight1, TRight2, TRight3, TRight4, TRight5, TRight6, TResult>> fn,
        Either<TLeft, TRight1> either1,
        Either<TLeft, TRight2> either2,
        Either<TLeft, TRight3> either3,
        Either<TLeft, TRight4> either4,
        Either<TLeft, TRight5> either5,
        Either<TLeft, TRight6> either6
    )
    {
        if (fn.IsLeft)
        {
            return Either.Left<TLeft, TResult>(fn.Left);
        }

        if (either1.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either1.Left);
        }

        if (either2.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either2.Left);
        }

        if (either3.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either3.Left);
        }

        if (either4.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either4.Left);
        }

        if (either5.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either5.Left);
        }

        if (either6.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either6.Left);
        }

        var f = fn.Right;
        var value1 = either1.Right;
        var value2 = either2.Right;
        var value3 = either3.Right;
        var value4 = either4.Right;
        var value5 = either5.Right;
        var value6 = either6.Right;
        var result = f(value1, value2, value3, value4, value5, value6);

        return Either.Right<TLeft, TResult>(result);
    }

    public static Either<TLeft, TResult> Apply<TLeft, TRight1, TRight2, TRight3, TRight4, TRight5, TRight6, TRight7, TResult>(
        this Either<TLeft, Func<TRight1, TRight2, TRight3, TRight4, TRight5, TRight6, TRight7, TResult>> fn,
        Either<TLeft, TRight1> either1,
        Either<TLeft, TRight2> either2,
        Either<TLeft, TRight3> either3,
        Either<TLeft, TRight4> either4,
        Either<TLeft, TRight5> either5,
        Either<TLeft, TRight6> either6,
        Either<TLeft, TRight7> either7
    )
    {
        if (fn.IsLeft)
        {
            return Either.Left<TLeft, TResult>(fn.Left);
        }

        if (either1.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either1.Left);
        }

        if (either2.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either2.Left);
        }

        if (either3.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either3.Left);
        }

        if (either4.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either4.Left);
        }

        if (either5.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either5.Left);
        }

        if (either6.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either6.Left);
        }

        if (either7.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either7.Left);
        }

        var f = fn.Right;
        var value1 = either1.Right;
        var value2 = either2.Right;
        var value3 = either3.Right;
        var value4 = either4.Right;
        var value5 = either5.Right;
        var value6 = either6.Right;
        var value7 = either7.Right;
        var result = f(value1, value2, value3, value4, value5, value6, value7);

        return Either.Right<TLeft, TResult>(result);
    }

    public static Either<TLeft, TResult> Apply<TLeft, TRight1, TRight2, TRight3, TRight4, TRight5, TRight6, TRight7, TRight8, TResult>(
        this Either<TLeft, Func<TRight1, TRight2, TRight3, TRight4, TRight5, TRight6, TRight7, TRight8, TResult>> fn,
        Either<TLeft, TRight1> either1,
        Either<TLeft, TRight2> either2,
        Either<TLeft, TRight3> either3,
        Either<TLeft, TRight4> either4,
        Either<TLeft, TRight5> either5,
        Either<TLeft, TRight6> either6,
        Either<TLeft, TRight7> either7,
        Either<TLeft, TRight8> either8
    )
    {
        if (fn.IsLeft)
        {
            return Either.Left<TLeft, TResult>(fn.Left);
        }

        if (either1.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either1.Left);
        }

        if (either2.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either2.Left);
        }

        if (either3.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either3.Left);
        }

        if (either4.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either4.Left);
        }

        if (either5.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either5.Left);
        }

        if (either6.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either6.Left);
        }

        if (either7.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either7.Left);
        }

        if (either8.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either8.Left);
        }

        var f = fn.Right;
        var value1 = either1.Right;
        var value2 = either2.Right;
        var value3 = either3.Right;
        var value4 = either4.Right;
        var value5 = either5.Right;
        var value6 = either6.Right;
        var value7 = either7.Right;
        var value8 = either8.Right;
        var result = f(value1, value2, value3, value4, value5, value6, value7, value8);

        return Either.Right<TLeft, TResult>(result);
    }

}