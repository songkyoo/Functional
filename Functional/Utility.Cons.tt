<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
<#@ import namespace="System.Linq" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Utility
{
<# for (var i = 2; i < MaxCount; i++) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (<#= GenericTypes(i + 1) #>) Cons<<#= GenericTypes(i + 1) #>>(T1 value, (<#= GenericTypes(i + 1, skipCount: 1) #>) tuple)
    {
        return (value<# for (var j = 1; j <= i; j++) { #>, tuple.Item<#= j #><# } #>);
    }

<# } #>
}

<#+
    string GenericTypes(int n, int skipCount = 0) => string.Join(", ", Enumerable.Range(1, n).Skip(skipCount).Select(i => $"T{i}"));
#>
