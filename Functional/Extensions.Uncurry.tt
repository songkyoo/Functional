<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Extensions
{
<#
for (var i = 2; i <= MaxCount; i++)
{
    var nestedActionType = "Func<T1, ";
    var nestedFuncType = "Func<T1, ";

    for (var j = 2; j < i; j++)
    {
        nestedActionType += $"Func<T{j}, ";
        nestedFuncType += $"Func<T{j}, ";
    }

    nestedActionType += $"Action<T{i}>";
    nestedFuncType += $"Func<T{i}, TResult>";

    for (var j = 2; j < i; j++)
    {
        nestedActionType += ">";
        nestedFuncType += ">";
    }

    nestedActionType += ">";
    nestedFuncType += ">";

    var actionTypeParams = string.Join(", ", Enumerable.Range(1, i).Select(n => $"T{n}"));
    var funcTypeParams = actionTypeParams + ", TResult";
    var paramList = string.Join(", ", Enumerable.Range(1, i).Select(n => $"arg{n}"));
#>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<<#= funcTypeParams #>> Uncurry<<#= funcTypeParams #>>(
        this <#= nestedFuncType #> fn
    )
    {
        return (<#= paramList #>) => fn<#= string.Join("", Enumerable.Range(1, i).Select(j => $"(arg{j})")) #>;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<<#= actionTypeParams #>> Uncurry<<#= actionTypeParams #>>(
        this <#= nestedActionType #> action
    )
    {
        return (<#= paramList #>) => action<#= string.Join("", Enumerable.Range(1, i).Select(j => $"(arg{j})")) #>;
    }

<#
}
#>
}
