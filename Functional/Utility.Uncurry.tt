<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Functional;

partial class Utility
{
<#
for (int i = 2; i <= MaxCount; i++)
{
    string nestedActionType = "Func<T1, ";
    string nestedFuncType = "Func<T1, ";

    for (int j = 2; j < i; j++)
    {
        nestedActionType += $"Func<T{j}, ";
        nestedFuncType += $"Func<T{j}, ";
    }

    nestedActionType += $"Action<T{i}>";
    nestedFuncType += $"Func<T{i}, TResult>";

    for (int j = 2; j < i; j++)
    {
        nestedActionType += ">";
        nestedFuncType += ">";
    }

    nestedActionType += ">";
    nestedFuncType += ">";

    string actionTypeParams = string.Join(", ", Enumerable.Range(1, i).Select(n => $"T{n}"));
    string funcTypeParams = actionTypeParams + ", TResult";
    string paramList = string.Join(", ", Enumerable.Range(1, i).Select(n => $"arg{n}"));
#>
    public static Func<<#= funcTypeParams #>> Uncurry<<#= funcTypeParams #>>(
        <#= nestedFuncType #> fn
    )
    {
        return (<#= paramList #>) => fn<#= string.Join("", Enumerable.Range(1, i).Select(j => $"(arg{j})")) #>;
    }

    public static Action<<#= actionTypeParams #>> Uncurry<<#= actionTypeParams #>>(
        <#= nestedActionType #> action
    )
    {
        return (<#= paramList #>) => action<#= string.Join("", Enumerable.Range(1, i).Select(j => $"(arg{j})")) #>;
    }

<#
}
#>
}
