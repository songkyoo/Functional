<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
#if MACARON_FUNCTIONAL_UNITASK
#nullable enable

using System;
using System.Threading;
using Cysharp.Threading.Tasks;

namespace Macaron.Functional.UniTaskExtensions
{
    partial class Extensions
    {
<# for (var i = 0; i <= MaxCount; i++) { #>
        public static async UniTask<T> TapAsync<T<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #><# } #>>(
            this UniTask<T> self, Func<<# for (var j = 1; j <= i; j++) { #>TArg<#= j #>, <# } #>T, CancellationToken, UniTask> fnAsync<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #> arg<#= j #><# } #>, CancellationToken cancellationToken
        ) where T : notnull
        {
            cancellationToken.ThrowIfCancellationRequested();

            var result = await self.AttachExternalCancellation(cancellationToken);

            await fnAsync(<# for (var j = 1; j <= i; j++) { #>arg<#= j #>, <# } #>result, cancellationToken);

            return result;
        }

        public static async UniTask<T> TapAsync<T<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #><# } #>>(
            this UniTask<T> self, Action<<# for (var j = 1; j <= i; j++) { #>TArg<#= j #>, <# } #>T> action<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #> arg<#= j #><# } #>, CancellationToken cancellationToken
        ) where T : notnull
        {
            cancellationToken.ThrowIfCancellationRequested();

            var result = await self.AttachExternalCancellation(cancellationToken);

            action(<# for (var j = 1; j <= i; j++) { #>arg<#= j #>, <# } #>result);

            return result;
        }

<# } #>
    }
}
#endif
