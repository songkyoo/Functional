<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Utility
{
<# for (var n = 2; n <= MaxCount; n++) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<T1, T<#= n + 1 #>> Compose<<# for (var i = 0; i < n; ++i) { #>T<#= i + 1 #>, <# } #>T<#= n + 1 #>>(
        Func<T<#= n #>, T<#= n + 1 #>> fn1,
<# for (var i = n - 1; i > 1; i--) { #>
        Func<T<#= i #>, T<#= i + 1 #>> fn<#= n - i + 1 #>,
<# } #>
        Func<T1, T2> fn<#= n #>
    )
    {
        return value =>
        {
            var result1 = fn<#= n #>(value);
<# for (var i = 2; i < n; i++) { #>
            var result<#= i #> = fn<#= n - i + 1 #>(result<#= i - 1 #>);
<# } #>
            var result<#= n #> = fn1(result<#= n - 1 #>);

            return result<#= n #>;
        };
    }

<# } #>
}
