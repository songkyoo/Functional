<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
#if MACARON_FUNCTIONAL_UNITASK
#nullable enable

using System;
using System.Threading;
using Cysharp.Threading.Tasks;

namespace Macaron.Functional.UniTaskExtensions
{
    partial class Extensions
    {
<# for (var i = 0; i <= MaxCount; i++) { #>
        public static async UniTask<T> AlsoAsync<T<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #><# } #>>(
            this UniTask<T> self, Func<T, <# for (var j = 1; j <= i; j++) { #>TArg<#= j #>, <# } #>CancellationToken, UniTask> fnAsync<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #> arg<#= j #><# } #>, CancellationToken cancellationToken
        ) where T : notnull
        {
            cancellationToken.ThrowIfCancellationRequested();

            var result = await self.AttachExternalCancellation(cancellationToken);

            await fnAsync(result<# for (var j = 1; j <= i; j++) { #>, arg<#= j #><# } #>, cancellationToken);

            return result;
        }

        public static async UniTask<T> AlsoAsync<T<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #><# } #>>(
            this UniTask<T> self, Action<T<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #><# } #>> action<# for (var j = 1; j <= i; j++) { #>, TArg<#= j #> arg<#= j #><# } #>, CancellationToken cancellationToken
        ) where T : notnull
        {
            cancellationToken.ThrowIfCancellationRequested();

            var result = await self.AttachExternalCancellation(cancellationToken);

            action(result<# for (var j = 1; j <= i; j++) { #>, arg<#= j #><# } #>);

            return result;
        }

<# } #>
    }
}
#endif
