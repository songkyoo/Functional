<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Functional;

partial class Utility
{
<#
for (int i = 2; i <= MaxCount; i++)
{
    string actionTypeParams = string.Join(", ", Enumerable.Range(1, i).Select(n => $"T{n}"));
    string funcTypeParams = actionTypeParams + ", TResult";
    string actionReturnType = "Func<T1, ";
    string funcReturnType = "Func<T1, ";

    for (int j = 2; j < i; j++)
    {
        actionReturnType += $"Func<T{j}, ";
        funcReturnType += $"Func<T{j}, ";
    }

    actionReturnType += $"Action<T{i}>";
    funcReturnType += $"Func<T{i}, TResult>";

    for (int j = 2; j < i; j++)
    {
        actionReturnType += ">";
        funcReturnType += ">";
    }

    actionReturnType += ">";
    funcReturnType += ">";
#>
    public static <#= funcReturnType #> Curry<<#= funcTypeParams #>>(
        Func<<#= funcTypeParams #>> fn
    )
    {
        return <#= string.Join("", Enumerable.Range(1, i).Select(j => $"arg{j} => ")) #>fn(arg1<#= string.Join("", Enumerable.Range(2, i-1).Select(j => $", arg{j}")) #>);
    }

    public static <#= actionReturnType #> Curry<<#= actionTypeParams #>>(
        Action<<#= actionTypeParams #>> action
    )
    {
        return <#= string.Join("", Enumerable.Range(1, i).Select(j => $"arg{j} => ")) #>action(arg1<#= string.Join("", Enumerable.Range(2, i-1).Select(j => $", arg{j}")) #>);
    }

<#
}
#>
}