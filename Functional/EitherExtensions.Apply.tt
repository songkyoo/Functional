<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
namespace Macaron.Functional;

partial class EitherExtensions
{
<# for (int i = 2; i <= MaxCount; i++) { #>
    public static Either<TLeft, TResult> Apply<TLeft, <# for (int j = 1; j <= i; j++) { #>TRight<#= j #>, <# } #>TResult>(
        this Either<TLeft, Func<<# for (int j = 1; j <= i; j++) { #>TRight<#= j #>, <# } #>TResult>> fn,
<# for (int j = 1; j < i; j++) { #>
        Either<TLeft, TRight<#= j #>> either<#= j #>,
<# } #>
        Either<TLeft, TRight<#= i #>> either<#= i #>
    )
    {
        if (fn.IsLeft)
        {
            return Either.Left<TLeft, TResult>(fn.Left);
        }

<# for (int j = 1; j <= i; j++) { #>
        if (either<#= j #>.IsLeft)
        {
            return Either.Left<TLeft, TResult>(either<#= j #>.Left);
        }

<# } #>
        var f = fn.Right;
<# for (int j = 1; j <= i; j++) { #>
        var value<#= j #> = either<#= j #>.Right;
<# } #>
        var result = f(<# for (int j = 1; j <= i; j++) { #>value<#= j #><# if (j < i) { #>, <# } #><# } #>);

        return Either.Right<TLeft, TResult>(result);
    }

<# } #>
}