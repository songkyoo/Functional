<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Extensions
{
<# for (var n = 2; n <= MaxCount; n++) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (<#= GenericResults(n) #>) ZipWith<<#= GenericTypes(n) #>, <#= GenericResults(n) #>>(
        this (<#= GenericTypes(n) #>) left,
        (<#= GenericTypes(n) #>) right,
        <#= GenericFuncs(n) #>
    )
    {
        return (<#= FuncCalls(n) #>);
    }

<# } #>
}

<#+
    string GenericTypes(int n) => string.Join(", ", Enumerable.Range(1, n).Select(i => $"T{i}"));

    string GenericResults(int n) => string.Join(", ", Enumerable.Range(1, n).Select(i => $"TResult{i}"));

    string GenericFuncs(int n) => string.Join(",\n        ", Enumerable.Range(1, n).Select(i => $"Func<T{i}, T{i}, TResult{i}> f{i}"));

    string FuncCalls(int n) => string.Join(", ", Enumerable.Range(1, n).Select(i => $"f{i}(left.Item{i}, right.Item{i})"));
#>
