<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
<#@ import namespace="System.Linq" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Extensions
{
<# for (var i = 2; i < MaxCount; i++) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (<#= GenericTypes(i + 1) #>) Append<<#= GenericTypes(i + 1) #>>(this (<#= GenericTypes(i) #>) tuple, T<#= i + 1 #> item)
    {
        return (<# for (var j = 1; j <= i; j++) { #>tuple.Item<#= j #>, <# } #>item);
    }

<# } #>
}

<#+
    string GenericTypes(int n) => string.Join(", ", Enumerable.Range(1, n).Select(i => $"T{i}"));
#>
