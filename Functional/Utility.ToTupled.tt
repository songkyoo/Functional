<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
// <auto-generated />
using System.Runtime.CompilerServices;

namespace Macaron.Functional;

partial class Utility
{
<# for (var i = 2; i <= MaxCount; i++) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Action<(<# for (var j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>)> ToTupled<<# for (var j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>>(
        Action<<# for (var j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>> action
    )
    {
        return tuple => action(
<# for (var j = 1; j < i; j++) { #>
            tuple.Item<#= j #>,
<# } #>
            tuple.Item<#= i #>
        );
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Func<(<# for (var j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>), TResult> ToTupled<<# for (var j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>, TResult>(
        Func<<# for (var j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>, TResult> fn
    )
    {
        return tuple => fn(
<# for (var j = 1; j < i; j++) { #>
            tuple.Item<#= j #>,
<# } #>
            tuple.Item<#= i #>
        );
    }

<# } #>
}
