<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.Int32" name="MaxCount" #>
<#@ import namespace="System.Linq" #>
// <auto-generated />
namespace Macaron.Functional;

partial class Extensions
{
<# for (int i = 1; i <= MaxCount; i++) { #>
    public static Action Bind<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>>(
        this Action<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>> action, <#= string.Join(", ", Enumerable.Range(1, i).Select(index => $"T{index} arg{index}")) #>
    )
    {
        return () => action(<#= string.Join(", ", Enumerable.Range(1, i).Select(index => $"arg{index}")) #>);
    }

    public static Func<TResult> Bind<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>, TResult>(
        this Func<<# for (int j = 1; j < i; j++) { #>T<#= j #>, <# } #>T<#= i #>, TResult> fn, <#= string.Join(", ", Enumerable.Range(1, i).Select(index => $"T{index} arg{index}")) #>
    )
    {
        return () => fn(<#= string.Join(", ", Enumerable.Range(1, i).Select(index => $"arg{index}")) #>);
    }

<# } // end for i #>
}
